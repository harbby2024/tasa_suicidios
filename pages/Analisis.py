import streamlit as st
import pandas as pd
import plotly.express as px

st.title("Tasa de Suicidios en Antioquia")

# Cargar datos
@st.cache_data
def load_data():
    return pd.read_excel("static/datasets/Cantidad_anual_de_suicidios_reportados.xls")

df = load_data()

# Mostrar dataset
if st.checkbox("Mostrar datos completos"):
    st.dataframe(df)

# Filtros en la barra lateral
st.sidebar.header("Filtros")

# Filtro por rango de a√±os
a√±os = sorted(df["A√±o"].unique())
rango_a√±os = st.sidebar.slider("Selecciona el rango de a√±os", min_value=min(a√±os), max_value=max(a√±os), value=(min(a√±os), max(a√±os)))

# Filtro por regi√≥n
regiones = sorted(df["NombreRegion"].dropna().unique())
region_seleccionada = st.sidebar.multiselect("Selecciona regi√≥n", regiones, default=regiones)

# Filtro por municipio (depende de la regi√≥n seleccionada)
municipios_disponibles = df[df["NombreRegion"].isin(region_seleccionada)]["NombreMunicipio"].unique()
municipios_seleccionados = st.sidebar.multiselect(
    "Selecciona municipios", sorted(municipios_disponibles), default=sorted(municipios_disponibles)
)

# Filtro por n√∫mero de casos
min_casos = int(df["NumeroCasos"].min())
max_casos = int(df["NumeroCasos"].max())
rango_casos = st.sidebar.slider("N√∫mero de casos", min_casos, max_casos, (min_casos, max_casos))

# Filtro opcional: Municipios con mayor n√∫mero de casos
top_n = st.sidebar.number_input("Escribe un n√∫mero para mostrar los municipios con mayor  cantidad de casos", min_value=0, max_value=100, value=0)

# Aplicar filtros
df_filtrado = df[
    (df["A√±o"] >= rango_a√±os[0]) &
    (df["A√±o"] <= rango_a√±os[1]) &
    (df["NombreRegion"].isin(region_seleccionada)) &
    (df["NombreMunicipio"].isin(municipios_seleccionados)) &
    (df["NumeroCasos"] >= rango_casos[0]) &
    (df["NumeroCasos"] <= rango_casos[1])
]

# Agrupar por municipio si se seleccionan varios a√±os
df_agrupado = df_filtrado.groupby("NombreMunicipio", as_index=False)["NumeroCasos"].sum()

# Aplicar filtro de Top N si es necesario
if top_n > 0:
    df_agrupado = df_agrupado.sort_values("NumeroCasos", ascending=False).head(top_n)

# Mostrar gr√°fico
if not df_agrupado.empty:
    fig = px.bar(
        df_agrupado,
        x="NombreMunicipio",
        y="NumeroCasos",
        title=f"Casos de Suicidio por Municipio ({rango_a√±os[0]} - {rango_a√±os[1]})",
        labels={"NumeroCasos": "N√∫mero de Casos"},
        height=500
    )
    st.plotly_chart(fig)
else:
    st.warning("No hay datos para los filtros seleccionados.")


st.subheader("üìà Variaci√≥n Interanual de Casos por Municipio")

# Filtrar sin agrupar (para ver a√±o a a√±o)
df_interanual = df[
    (df["NombreRegion"].isin(region_seleccionada)) &
    (df["NombreMunicipio"].isin(municipios_seleccionados)) &
    (df["A√±o"] >= rango_a√±os[0]) &
    (df["A√±o"] <= rango_a√±os[1])
].copy()

# Ordenar y calcular variaci√≥n por municipio
df_interanual.sort_values(["NombreMunicipio", "A√±o"], inplace=True)
df_interanual["Variacion"] = df_interanual.groupby("NombreMunicipio")["NumeroCasos"].pct_change() * 100

# Redondear variaci√≥n
df_interanual["Variacion"] = df_interanual["Variacion"].round(2)

# Crear una copia del DataFrame para mostrar valores formateados
df_mostrar = df_interanual[["NombreMunicipio", "A√±o", "NumeroCasos", "Variacion"]].copy()

# Reemplazar valores infinitos por NaN o por un s√≠mbolo personalizado
df_mostrar["Variacion"].replace([float("inf"), float("-inf")], pd.NA, inplace=True)

# Formatear la columna Variacion como porcentaje con s√≠mbolo %
df_mostrar["Variacion"] = df_mostrar["Variacion"].apply(lambda x: f"{x:.2f}%" if pd.notnull(x) else "‚Äî")

# Mostrar la tabla formateada
st.dataframe(df_mostrar, use_container_width=True)



st.subheader("üìä Evoluci√≥n Temporal de Casos")

fig_line = px.line(
    df_interanual,
    x="A√±o",
    y="NumeroCasos",
    color="NombreMunicipio",
    markers=True,
    title="Evoluci√≥n de Casos por Municipio",
    labels={"NumeroCasos": "N√∫mero de Casos"},
    height=500
)

st.plotly_chart(fig_line)

st.subheader("üßæ Resumen General de Datos Filtrados")

if df_filtrado.empty:
    st.info("No hay datos disponibles para mostrar un resumen con los filtros aplicados.")
else:
    total_casos = df_filtrado["NumeroCasos"].sum()
    total_municipios = df_filtrado["NombreMunicipio"].nunique()
    a√±os_analizados = df_filtrado["A√±o"].nunique()
    a√±o_inicio = df_filtrado["A√±o"].min()
    a√±o_fin = df_filtrado["A√±o"].max()

    resumen_agrupado = df_filtrado.groupby("NombreMunicipio")["NumeroCasos"].sum().reset_index()
    municipio_max = resumen_agrupado.loc[resumen_agrupado["NumeroCasos"].idxmax()]
    municipio_min = resumen_agrupado.loc[resumen_agrupado["NumeroCasos"].idxmin()]
    promedio_municipio = resumen_agrupado["NumeroCasos"].mean()

    col1, col2 = st.columns(2)
    with col1:
        st.metric("üî¢ Total de casos reportados", f"{int(total_casos):,}")
        st.metric("üèòÔ∏è Municipios analizados", total_municipios)
        st.metric("üìÖ A√±os cubiertos", f"{a√±o_inicio} - {a√±o_fin} ({a√±os_analizados} a√±os)")

    with col2:
        st.metric("üìà Municipio con m√°s casos", f"{municipio_max['NombreMunicipio']} ({int(municipio_max['NumeroCasos'])} casos)")
        st.metric("üìâ Municipio con menos casos", f"{municipio_min['NombreMunicipio']} ({int(municipio_min['NumeroCasos'])} casos)")
        st.metric("üìä Promedio por municipio", f"{promedio_municipio:.2f} casos")

    # Variaci√≥n media si hay solo un municipio
    municipios_unicos = df_interanual["NombreMunicipio"].nunique()
    if municipios_unicos == 1:
        variacion_media = df_interanual["Variacion"].dropna().mean()
        st.info(f"üìà La variaci√≥n media interanual para **{df_interanual['NombreMunicipio'].iloc[0]}** fue de **{variacion_media:.2f}%**.")







